openapi: 3.0.1
info:
  title: ORCA SNS API
  description: Business and Monitoring System - REST API Documentation
  contact:
    name: GCP Global Development Team
    url: https://gcpglobal.com
    email: soporte@gcpglobal.com
  license:
    name: Proprietary
    url: https://gcpglobal.com/license
  version: v1.0.0
servers:
  - url: http://localhost:8080/sns
    description: Development Server
  - url: https://api.gcpglobal.com
    description: Production Server
security:
  - Bearer Authentication: []
tags:
  - name: 03-Business Line Catalog
    description: Business line catalog management endpoints (BackOffice)
  - name: 05-Cache Management
    description: Cache management endpoints for backoffice administration
  - name: 05-Schema Management
    description: Endpoints for managing client schema selection
  - name: 07-Debug & Monitoring
    description: Debug endpoints for development and monitoring
  - name: 05-BackOffice Client Management
    description: Client management endpoints for backoffice administration
  - name: 06-BackOffice Language Management
    description: Endpoints for backoffice language administration
  - name: 01-BackOffice Password Token Management
    description: BackOffice administrative endpoints for password setup token management and cleanup
  - name: 01-BackOffice Authentication
    description: Authentication endpoints for BackOffice access
  - name: 02-BackOffice User Management
    description: Administrative endpoints for user management
paths:
  /bo/users/{userId}:
    put:
      tags:
        - 02-BackOffice User Management
      summary: Update user (BackOffice)
      description: Update backoffice user information (name, phone, etc.)
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        description: User update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDTO'
            examples:
              Update Name and Phone:
                description: Update user's name and contact information
                value:
                  firstName: Jorge Antonio
                  lastName: López
                  secondLastName: Martínez
                  phoneNumber: '+525512345679'
                  phoneExtension: '102'
              Update Name Only:
                description: Update only user's name fields
                value:
                  firstName: María Carmen
                  lastName: García
                  secondLastName: Ruiz
                  phoneNumber: '+525587654321'
                  phoneExtension: '205'
              Remove Extension:
                description: Update user without phone extension
                value:
                  firstName: Carlos
                  lastName: Pérez
                  secondLastName: González
                  phoneNumber: '+525598765433'
                  phoneExtension: ''
        required: true
      responses:
        '200':
          description: User updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '400':
          description: Invalid input data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/languages/{id}/set-default:
    put:
      tags:
        - 06-BackOffice Language Management
      summary: Change default language
      description: Sets a language as the default language for backoffice
      operationId: setDefaultLanguage
      parameters:
        - name: id
          in: path
          description: Language ID to set as default
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Default language changed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
        '404':
          description: Language not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/clients/{clientId}:
    get:
      tags:
        - 05-BackOffice Client Management
      summary: Get client by ID
      description: Retrieves detailed information about a specific client by its ID.
      operationId: getClientById
      parameters:
        - name: clientId
          in: path
          description: ID of the client to retrieve
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Client retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
      security:
        - Bearer Authentication: []
    put:
      tags:
        - 05-BackOffice Client Management
      summary: Update existing client
      description: Updates an existing client's information and subscription details.
      operationId: updateClient
      parameters:
        - name: clientId
          in: path
          description: ID of the client to update
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      requestBody:
        description: Client update data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientRequestDTO'
            examples:
              Update Client Information:
                description: Update Client Information
                value:
                  name: TechCorp Solutions Updated
                  subdomain: techcorp-new
                  legalName: TechCorp Solutions International S.A. de C.V.
                  rfc: TCS990825M2A
                  businessLineId: 1
                  responsibleUserId: 2
                  description: Leading global technology solutions provider
                  legalContactName: Carlos Mendoza Ruiz
                  legalContactEmail: legal.mx@techcorp.com
                  legalContactPhone: '+525551234568'
                  technicalContactName: Ana Torres Sánchez
                  technicalContactEmail: tech.support@techcorp.com
                  technicalContactPhone: '+525559876544'
                  logoUrl: https://cdn.techcorp.com/logo-v2.png
                  subscriptionStartDate: '2025-01-01'
                  subscriptionEndDate: '2026-12-31'
                  isActive: true
        required: true
      responses:
        '200':
          description: Client updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '400':
          description: Invalid input data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '409':
          description: Another client already has this subdomain or RFC
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/business-lines/{id}:
    get:
      tags:
        - 03-Business Line Catalog
      summary: Get business line by ID
      description: Retrieves a specific business line by its ID
      operationId: getBusinessLineById
      parameters:
        - name: id
          in: path
          description: Business line ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Business line found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '404':
          description: Business line not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
    put:
      tags:
        - 03-Business Line Catalog
      summary: Update business line
      description: Updates an existing business line
      operationId: updateBusinessLine
      parameters:
        - name: id
          in: path
          description: Business line ID
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackofficeBusinessLineRequestDTO'
        required: true
      responses:
        '200':
          description: Business line updated successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '400':
          description: Invalid input
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '404':
          description: Business line not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '409':
          description: Duplicate business line
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - 03-Business Line Catalog
      summary: Delete business line
      description: Permanently deletes a business line from the system
      operationId: deleteBusinessLine
      parameters:
        - name: id
          in: path
          description: Business line ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Business line deleted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: Business line not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '409':
          description: Cannot delete business line with associated clients
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/users/{userId}/resend-password-setup:
    post:
      tags:
        - 02-BackOffice User Management
      summary: Resend password setup email (BackOffice)
      description: Resend the password setup email to a backoffice user if they have a valid token.
      operationId: resendPasswordSetupEmail
      parameters:
        - name: userId
          in: path
          description: ID of the user to resend password setup email
          required: true
          schema:
            type: integer
            format: int64
          example: 123
      responses:
        '200':
          description: Password setup email resent successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: User not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/users/register:
    post:
      tags:
        - 02-BackOffice User Management
      summary: Register new user (BackOffice only)
      description: Allows an administrator to create a new user in the system with specified roles. This is the only way to create new users.
      operationId: registerUser
      requestBody:
        description: User registration data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequestDTO'
            examples:
              Backoffice Admin User:
                description: Create a backoffice admin user (password set via email)
                value:
                  username: jlopez
                  email: jlopez@demo.com
                  firstName: Jorge Antonio
                  lastName: López
                  secondLastName: Martínez
                  phoneNumber: '+525512345678'
                  phoneExtension: '101'
                  roleCodes:
                    - BO_ADMIN
              Multi-Role User:
                description: Create a user with multiple backoffice roles (password set via email)
                value:
                  username: mgarcia
                  email: mgarcia@demo.com
                  firstName: María Carmen
                  lastName: García
                  secondLastName: Ruiz
                  phoneNumber: '+525587654321'
                  phoneExtension: '205'
                  roleCodes:
                    - BO_ADMIN
              Basic User:
                description: Create a basic user without roles (password set via email)
                value:
                  username: cperez
                  email: cperez@demo.com
                  firstName: Carlos
                  lastName: Pérez
                  secondLastName: González
                  phoneNumber: '+525598765432'
                  phoneExtension: ''
                  roleCodes: []
        required: true
      responses:
        '201':
          description: User created successfully and onboarding email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
              examples:
                Successful registration:
                  description: Successful registration
                  value:
                    token: null
                    refreshToken: null
                    tokenType: Onboarding
                    expiresIn: 0
                    username: jlopez
                    email: jlopez@demo.com
                    roles:
                      - PENDING_SETUP
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              examples:
                User already exists:
                  description: User already exists
                  value:
                    message: Username is already taken
                    timestamp: '2025-08-19T10:30:00Z'
                Invalid role:
                  description: Invalid role
                  value:
                    message: 'Role not found: INVALID_ROLE'
                    timestamp: '2025-08-19T10:30:00Z'
        '403':
          description: No administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/tokens/cleanup:
    post:
      tags:
        - 01-BackOffice Password Token Management
      summary: Manual password token cleanup
      description: Manually triggers password setup token cleanup with optional custom parameters for BackOffice administration. If parameters are not provided, uses configuration defaults.
      operationId: manualCleanup
      parameters:
        - name: daysKeepUsed
          in: query
          description: Days to keep used tokens (optional, uses config default if not provided)
          required: false
          schema:
            type: integer
            format: int32
        - name: daysKeepExpired
          in: query
          description: Days to keep expired unused tokens (optional, uses config default if not provided)
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Token cleanup completed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
        '400':
          description: Invalid cleanup parameters
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
        '500':
          description: Token cleanup failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
      security:
        - Bearer Authentication: []
  /bo/tokens/cleanup/force:
    post:
      tags:
        - 01-BackOffice Password Token Management
      summary: Force immediate password token cleanup
      description: Forces immediate cleanup of all expired password setup tokens for BackOffice administration (used tokens older than 1 day, expired unused tokens)
      operationId: forceCleanup
      responses:
        '200':
          description: Force cleanup completed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
        '500':
          description: Token cleanup failed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupResultDTO'
      security:
        - Bearer Authentication: []
  /bo/setup-password:
    post:
      tags:
        - 01-BackOffice Authentication
      summary: BackOffice Password Setup
      description: Sets up initial password for BackOffice users using a setup token
      operationId: setupPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupPasswordRequestDTO'
        required: true
      responses:
        '200':
          description: Password setup completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '400':
          description: Invalid setup token or password validation failed
          content:
            application/json:
              examples:
                Invalid token:
                  description: Invalid token
                  value:
                    message: Invalid or expired setup token
                    timestamp: '2025-01-15T10:30:00Z'
      security:
        - Bearer Authentication: []
  /bo/schema/switch:
    post:
      tags:
        - 05-Schema Management
      summary: Switch to client schema
      description: Switches the current session to a specific client schema. User must have access to the requested client. Returns new JWT token with client ID claim.
      operationId: switchSchema
      requestBody:
        description: Schema switch request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwitchSchemaRequestDTO'
            examples:
              Switch to Demo Client:
                description: Switch to Demo Organization (client ID 1)
                value:
                  idClient: 1
              Switch to TechCorp Client:
                description: Switch to TechCorp México (client ID 2)
                value:
                  idClient: 2
        required: true
      responses:
        '200':
          description: Successfully switched to requested schema
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
              examples:
                Successful switch:
                  description: Successful switch
                  value:
                    token: eyJhbGciOi...
                    refreshToken: eyJhbGciOi...
                    tokenType: Bearer
                    expiresIn: 86400000
                    username: orca
                    email: orca@demo.com
                    roles:
                      - BO_ADMIN
        '400':
          description: Invalid client ID or client does not exist
          content:
            application/json:
              examples:
                Invalid schema:
                  description: Invalid schema
                  value:
                    message: 'Schema not found or inactive: orca_sns_user_invalid'
                    timestamp: '2025-01-15T10:30:00Z'
        '401':
          description: Not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '403':
          description: User does not have access to the requested client
          content:
            application/json:
              examples:
                Access denied:
                  description: Access denied
                  value:
                    message: You don't have access to this client
                    timestamp: '2025-01-15T10:30:00Z'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - 05-Schema Management
      summary: Clear schema selection
      description: Clears the current schema selection and returns to backoffice default context. Returns new JWT token without schema claim.
      operationId: clearSchema
      responses:
        '200':
          description: Successfully cleared schema selection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
              examples:
                Schema cleared:
                  description: Schema cleared
                  value:
                    token: eyJhbGciOi...
                    refreshToken: eyJhbGciOi...
                    tokenType: Bearer
                    expiresIn: 86400000
                    username: orca
                    email: orca@demo.com
                    roles:
                      - BO_ADMIN
        '401':
          description: Not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/refresh:
    post:
      tags:
        - 01-BackOffice Authentication
      summary: BackOffice Refresh Token
      description: Refreshes authentication token for BackOffice access, maintaining BO_ADMIN role
      operationId: refreshBackOffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequestDTO'
        required: true
      responses:
        '200':
          description: Token refreshed successfully with BackOffice roles maintained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              examples:
                Invalid refresh token:
                  description: Invalid refresh token
                  value:
                    message: Invalid refresh token
                    timestamp: '2025-01-15T10:30:00Z'
      security:
        - Bearer Authentication: []
  /bo/login:
    post:
      tags:
        - 01-BackOffice Authentication
      summary: BackOffice Login
      description: 'Authenticates a user for BackOffice access with BO_ADMIN permissions. Default master user: username=''orca'', password=''advisor''. IMPORTANT: Only accepts literal username, NOT email. The ''schema'' field is used when app.debug.schema.enabled=true (currently enabled in dev), otherwise uses ''orca_sns_user_backoffice''.'
      operationId: loginBackOffice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDTO'
        required: true
      responses:
        '200':
          description: Successful BackOffice login with BO_ADMIN role assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponseDTO'
              examples:
                Successful BO login:
                  description: Successful BO login
                  value:
                    token: eyJhbGciOi...
                    refreshToken: eyJhbGciOi...
                    tokenType: Bearer
                    expiresIn: 86400000
                    username: orca
                    email: orca@gcpglobal.com
                    roles:
                      - ADMIN
                      - USER
                      - BO_ADMIN
        '401':
          description: Invalid credentials
          content:
            application/json:
              examples:
                Authentication error:
                  description: Authentication error
                  value:
                    message: Invalid username or password
                    timestamp: '2025-01-15T10:30:00Z'
      security:
        - Bearer Authentication: []
  /bo/clients:
    get:
      tags:
        - 05-BackOffice Client Management
      summary: Get all clients
      description: Retrieves a paginated list of all clients in the system. Only accessible by BackOffice administrators.
      operationId: getAllClients
      parameters:
        - name: pageable
          in: query
          description: Pagination parameters
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          example:
            page: 0
            size: 20
            sort: name,asc
      responses:
        '200':
          description: Clients retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
      security:
        - Bearer Authentication: []
    post:
      tags:
        - 05-BackOffice Client Management
      summary: Create new client
      description: Creates a new client in the system with subscription details.
      operationId: createClient
      requestBody:
        description: Client creation data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientRequestDTO'
            examples:
              Technology Company Client:
                description: Technology Company Client
                value:
                  name: TechCorp Solutions
                  subdomain: techcorp
                  legalName: TechCorp Solutions S.A. de C.V.
                  rfc: TCS990825M2A
                  businessLineId: 1
                  responsibleUserId: 1
                  description: Leading technology solutions provider
                  legalContactName: Juan Pérez García
                  legalContactEmail: legal@techcorp.mx
                  legalContactPhone: '+525551234567'
                  technicalContactName: María López Hernández
                  technicalContactEmail: tech@techcorp.mx
                  technicalContactPhone: '+525559876543'
                  logoUrl: https://techcorp.mx/logo.png
                  schemaName: techcorp_prod
                  subscriptionStartDate: '2025-01-01'
                  subscriptionEndDate: '2025-12-31'
                  isActive: true
        required: true
      responses:
        '201':
          description: Client and organization created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '400':
          description: Invalid input data
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
        '409':
          description: Client with subdomain/RFC already exists or schema name is taken
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/clients/{clientId}/users/{userId}:
    post:
      tags:
        - 05-BackOffice Client Management
      summary: Assign BackofficeUser to client
      description: Assigns a BackofficeUser to a client and replicates the user in the client's client schema.
      operationId: assignUserToClient
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: integer
            format: int32
          example: 1
        - name: userId
          in: path
          description: ID of the BackofficeUser to assign
          required: true
          schema:
            type: integer
            format: int64
          example: 123
      responses:
        '201':
          description: User assigned to client successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '400':
          description: Bad request - user already assigned or client inactive
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: User or client not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - 05-BackOffice Client Management
      summary: Unassign BackofficeUser from client
      description: Removes the assignment between a BackofficeUser and a client (soft delete).
      operationId: unassignUserFromClient
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: integer
            format: int32
          example: 1
        - name: userId
          in: path
          description: ID of the BackofficeUser to unassign
          required: true
          schema:
            type: integer
            format: int64
          example: 123
      responses:
        '200':
          description: User unassigned from client successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: User assignment not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/business-lines:
    get:
      tags:
        - 03-Business Line Catalog
      summary: Get all business lines
      description: Retrieves a paginated list of all business lines
      operationId: getAllBusinessLines
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Business lines retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
      security:
        - Bearer Authentication: []
    post:
      tags:
        - 03-Business Line Catalog
      summary: Create new business line
      description: Creates a new business line in the system
      operationId: createBusinessLine
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBackofficeBusinessLineRequestDTO'
        required: true
      responses:
        '201':
          description: Business line created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '400':
          description: Invalid input
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '409':
          description: Business line already exists
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
  /bo/users/{userId}/reset-login-attempts:
    patch:
      tags:
        - 02-BackOffice User Management
      summary: Reset user login attempts
      description: Resets failed login attempts and unlocks a user account. Used when a user is locked out due to too many failed login attempts.
      operationId: resetUserLoginAttempts
      parameters:
        - name: userId
          in: path
          description: ID of the user to reset login attempts
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Login attempts reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
              examples:
                Reset successful:
                  description: Reset successful
                  value:
                    id: 1
                    username: jdoe
                    email: jdoe@example.com
                    firstName: John
                    lastName: Doe
                    isActive: true
                    failedLoginAttempts: 0
                    lockedUntil: null
                    lastLoginAt: '2024-01-15T10:30:00Z'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '404':
          description: User not found
          content:
            application/json:
              examples:
                User not found:
                  description: User not found
                  value:
                    message: 'User not found with id: 999'
                    timestamp: '2024-01-15T10:30:00Z'
      security:
        - Bearer Authentication: []
  /bo/clients/{clientId}/toggle-status:
    patch:
      tags:
        - 05-BackOffice Client Management
      summary: Toggle client status
      description: Activates or deactivates a client. This affects schema validation and clears related cache.
      operationId: toggleClientStatus
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: integer
            format: int32
          example: 1
        - name: isActive
          in: query
          description: New active status
          required: true
          schema:
            type: boolean
          example: true
      responses:
        '200':
          description: Client status toggled successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/business-lines/{id}/toggle-status:
    patch:
      tags:
        - 03-Business Line Catalog
      summary: Toggle business line status
      description: Activates or deactivates a business line
      operationId: toggleBusinessLineStatus
      parameters:
        - name: id
          in: path
          description: Business line ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Business line status toggled successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '404':
          description: Business line not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
  /bo/users:
    get:
      tags:
        - 02-BackOffice User Management
      summary: Get all users
      description: Retrieves a paginated list of all users in the system. Only accessible by BackOffice administrators.
      operationId: getAllUsers
      parameters:
        - name: pageable
          in: query
          description: Pagination parameters
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          example:
            page: 0
            size: 20
            sort: id,asc
      responses:
        '200':
          description: Users retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
      security:
        - Bearer Authentication: []
  /bo/users/roles:
    get:
      tags:
        - 02-BackOffice User Management
      summary: Get available roles
      description: Retrieves all available roles in the system for user assignment
      operationId: getAvailableRoles
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeRoleBasicDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackofficeRoleBasicDTO'
      security:
        - Bearer Authentication: []
  /bo/tokens/statistics:
    get:
      tags:
        - 01-BackOffice Password Token Management
      summary: Get token statistics
      description: Retrieves statistics about password setup tokens including active, expired, and used tokens for BackOffice administration
      operationId: getTokenStatistics
      responses:
        '200':
          description: Token statistics retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenStatisticsDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenStatisticsDTO'
      security:
        - Bearer Authentication: []
  /bo/tokens/cleanup/status:
    get:
      tags:
        - 01-BackOffice Password Token Management
      summary: Check password token cleanup service status
      description: Checks if the password setup token cleanup service is enabled for BackOffice administration and shows current configuration
      operationId: getCleanupStatus
      responses:
        '200':
          description: Cleanup service status retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/tokens/cleanup-config:
    get:
      tags:
        - 01-BackOffice Password Token Management
      summary: Get password token cleanup configuration
      description: Retrieves the current password setup token cleanup configuration settings for BackOffice administration
      operationId: getCleanupConfig
      responses:
        '200':
          description: Token cleanup configuration retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupConfigDTO'
              examples:
                Cleanup Configuration:
                  description: Cleanup Configuration
                  value:
                    enabled: true
                    scheduleCron: 0 0 2 * * *
                    daysKeepUsed: 30
                    daysKeepExpired: 7
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TokenCleanupConfigDTO'
      security:
        - Bearer Authentication: []
  /bo/schema/current:
    get:
      tags:
        - 05-Schema Management
      summary: Get current schema
      description: Returns the currently selected schema name if any
      operationId: getCurrentSchema
      responses:
        '200':
          description: Current schema information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
              examples:
                Schema selected:
                  description: Schema selected
                  value:
                    message: 'Current schema: orca_sns_user_demo'
                No schema:
                  description: No schema
                  value:
                    message: No schema selected
        '401':
          description: Not authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/schema/clients:
    get:
      tags:
        - 05-Schema Management
      summary: Get user's accessible clients
      description: Returns list of all clients the current user has access to
      operationId: getUserClients
      responses:
        '200':
          description: List of accessible clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientAccessDTO'
              examples:
                Client list:
                  description: Client list
                  value:
                    - clientId: 1
                      clientName: Demo Organization
                      schemaName: orca_sns_user_demo
                      domainUrl: https://demo.com
                      logoUrl: https://demo.com/logo.png
                      role: admin
                    - clientId: 2
                      clientName: TechCorp México
                      schemaName: orca_sns_user_techcorp
                      domainUrl: https://techcorp.mx
                      logoUrl: https://techcorp.mx/logo.png
                      role: admin
        '401':
          description: Not authenticated
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientAccessDTO'
      security:
        - Bearer Authentication: []
  /bo/languages:
    get:
      tags:
        - 06-BackOffice Language Management
      summary: Get all languages
      description: Retrieves a paginated list of all languages
      operationId: getAllLanguages
      parameters:
        - name: pageable
          in: query
          description: 'Pagination parameters. Use query params: ?page=0&size=20&sort=property,direction'
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          examples:
            Sort by name DESC:
              description: Sort by name DESC
              value:
                page: 0
                size: 10
                sort: name,desc
            Sort by ID DESC:
              description: Sort by ID DESC
              value:
                page: 0
                size: 20
                sort: id,desc
            Default:
              description: Default
              value:
                page: 0
                size: 20
                sort: id,asc
      responses:
        '200':
          description: Languages retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
      security:
        - Bearer Authentication: []
  /bo/languages/{id}:
    get:
      tags:
        - 06-BackOffice Language Management
      summary: Get language by ID
      description: Retrieves a specific language by its ID
      operationId: getLanguageById
      parameters:
        - name: id
          in: path
          description: Language ID
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Language found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
        '404':
          description: Language not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LanguageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/debug/status:
    get:
      tags:
        - 07-Debug & Monitoring
      operationId: getDebugStatus
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/clients/{clientId}/users:
    get:
      tags:
        - 05-BackOffice Client Management
      summary: Get users assigned to client
      description: Retrieves all BackofficeUsers currently assigned to a specific client.
      operationId: getClientUsers
      parameters:
        - name: clientId
          in: path
          description: ID of the client
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Client users retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackofficeUserResponseDTO'
        '404':
          description: Client not found
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackofficeUserResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/clients/schema-availability/{schemaName}:
    get:
      tags:
        - 05-BackOffice Client Management
      summary: Check schema name availability
      description: Checks if a schema name is available for use when creating a new client. Validates format and checks both client table and database schema existence.
      operationId: checkSchemaAvailability
      parameters:
        - name: schemaName
          in: path
          description: Schema name suffix to check (without orca_sns_user_ prefix)
          required: true
          schema:
            type: string
          example: new_company
      responses:
        '200':
          description: Schema availability check completed
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SchemaAvailabilityResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SchemaAvailabilityResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/clients/active:
    get:
      tags:
        - 05-BackOffice Client Management
      summary: Get active clients
      description: Retrieves a paginated list of active clients only. Only accessible by BackOffice administrators.
      operationId: getActiveClients
      parameters:
        - name: pageable
          in: query
          description: Pagination parameters
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
          example:
            page: 0
            size: 20
            sort: name,asc
      responses:
        '200':
          description: Active clients retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagedModel'
      security:
        - Bearer Authentication: []
  /bo/cache/schemas/stats:
    get:
      tags:
        - 05-Cache Management
      summary: Get cache statistics
      description: Retrieves current cache statistics for client schemas validation cache
      operationId: getCacheStats
      responses:
        '200':
          description: Cache statistics retrieved successfully
          content:
            '*/*':
              schema:
                type: string
      security:
        - Bearer Authentication: []
  /bo/cache/schemas/clients:
    get:
      tags:
        - 05-Cache Management
      summary: Get cached clients
      description: Retrieves all currently cached client data including id, name, logoUrl and schemaName
      operationId: getCachedClients
      responses:
        '200':
          description: Cached clients retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ClientCacheDTO'
      security:
        - Bearer Authentication: []
  /bo/cache/role-licenses/{clientId}:
    get:
      tags:
        - 05-Cache Management
      summary: Get cached role licenses
      description: Retrieves role licenses data from cache for a specific client including role info, max licenses and used licenses
      operationId: getRoleLicenses
      parameters:
        - name: clientId
          in: path
          description: Client ID to get role licenses for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Role licenses retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RoleLicenseDTO'
      security:
        - Bearer Authentication: []
    delete:
      tags:
        - 05-Cache Management
      summary: Clear role licenses cache for client
      description: Clears cache entry for role licenses of a specific client
      operationId: clearRoleLicensesCache
      parameters:
        - name: clientId
          in: path
          description: Client ID to clear role licenses cache for
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Role licenses cache cleared successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/cache/role-licenses/stats:
    get:
      tags:
        - 05-Cache Management
      summary: Get role licenses cache statistics
      description: Retrieves current cache statistics for role licenses cache
      operationId: getRoleLicensesCacheStats
      responses:
        '200':
          description: Role licenses cache statistics retrieved successfully
          content:
            '*/*':
              schema:
                type: string
      security:
        - Bearer Authentication: []
  /bo/business-lines/code/{code}:
    get:
      tags:
        - 03-Business Line Catalog
      summary: Get business line by code
      description: Retrieves a specific business line by its code
      operationId: getBusinessLineByCode
      parameters:
        - name: code
          in: path
          description: Business line code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Business line found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '404':
          description: Business line not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
  /bo/business-lines/active:
    get:
      tags:
        - 03-Business Line Catalog
      summary: Get all active business lines
      description: Retrieves a list of all active business lines
      operationId: getAllActiveBusinessLines
      responses:
        '200':
          description: Business lines retrieved successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BackofficeBusinessLineDTO'
        '403':
          description: Access denied
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BackofficeBusinessLineDTO'
      security:
        - Bearer Authentication: []
  /bo/users/{userId}/roles/{roleId}:
    delete:
      tags:
        - 02-BackOffice User Management
      summary: Remove role from user (BackOffice)
      description: Removes a role assignment from a backoffice user through BackOffice administration.
      operationId: removeRoleFromUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to remove role from
          required: true
          schema:
            type: integer
            format: int64
          example: 123
        - name: roleId
          in: path
          description: ID of the role to remove
          required: true
          schema:
            type: integer
            format: int32
          example: 2
      responses:
        '200':
          description: Role removed successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '403':
          description: No BackOffice administrator permissions
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
        '404':
          description: Role assignment not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/cache/schemas:
    delete:
      tags:
        - 05-Cache Management
      summary: Clear all schema cache
      description: Clears all entries from the client schemas validation cache
      operationId: clearAllCache
      responses:
        '200':
          description: Cache cleared successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/cache/schemas/{idClient}:
    delete:
      tags:
        - 05-Cache Management
      summary: Clear specific schema cache
      description: Clears cache entry for a specific client schema
      operationId: clearSchemaCache
      parameters:
        - name: idClient
          in: path
          description: Client ID to clear from cache
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Schema cache cleared successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
  /bo/cache/role-licenses:
    delete:
      tags:
        - 05-Cache Management
      summary: Clear all role licenses cache
      description: Clears all entries from the role licenses cache
      operationId: clearAllRoleLicensesCache
      responses:
        '200':
          description: All role licenses cache cleared successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDTO'
      security:
        - Bearer Authentication: []
components:
  schemas:
    UpdateUserRequestDTO:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 200
          minLength: 0
          type: string
          description: User's first name (includes first and middle names)
          example: John Michael
        lastName:
          maxLength: 100
          minLength: 0
          type: string
          description: User's last name (paternal surname)
          example: Doe
        secondLastName:
          maxLength: 100
          minLength: 0
          type: string
          description: User's second last name (maternal surname)
          example: Smith
        phoneNumber:
          maxLength: 15
          minLength: 0
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
          description: Phone number with country code
          example: '+525551234567'
        phoneExtension:
          maxLength: 10
          minLength: 0
          type: string
          description: Phone extension number
          example: '123'
      description: Request to update user information
    BackofficeUserResponseDTO:
      type: object
      properties:
        id:
          type: integer
          description: User identifier
          format: int64
          example: 123
        username:
          type: string
          description: Username
          example: admin.user
        email:
          type: string
          description: Email address
          example: admin.user@company.com
        firstName:
          type: string
          description: First name
          example: John
        lastName:
          type: string
          description: Last name
          example: Doe
        secondLastName:
          type: string
          description: Second last name
          example: Smith
        fullName:
          type: string
          description: Full name
          example: John Doe Smith
        phoneNumber:
          type: string
          description: Phone number in E.164 format
          example: '+525551234567'
        phoneExtension:
          type: string
          description: Phone extension
          example: '101'
        avatarUrl:
          type: string
          description: Avatar URL
          example: https://example.com/avatars/admin.jpg
        languageId:
          type: integer
          description: Language ID
          format: int32
          example: 1
        languageCode:
          type: string
          description: Language code
          example: en
        languageName:
          type: string
          description: Language display name
          example: English
        enabled:
          type: boolean
          description: Whether the user account is enabled
          example: true
        verified:
          type: boolean
          description: Whether the user email is verified
          example: true
        lastLogin:
          type: string
          description: Last login timestamp
          format: date-time
          example: '2024-01-15T10:30:00Z'
        roles:
          type: array
          description: List of assigned backoffice role names
          example:
            - BO_ADMIN
            - BO_MANAGER
          items:
            type: string
            description: List of assigned backoffice role names
            example: '["BO_ADMIN","BO_MANAGER"]'
        clientSchemas:
          type: array
          description: List of client schemas this user has access to
          example:
            - local_dev
            - acme_prod
          items:
            type: string
            description: List of client schemas this user has access to
            example: '["local_dev","acme_prod"]'
        registeredByUsername:
          type: string
          description: Username of the person who registered this user
          example: super.admin
        createdAt:
          type: string
          description: When the user was created
          format: date-time
          example: '2024-01-15T10:30:00Z'
        updatedAt:
          type: string
          description: When the user was last updated
          format: date-time
          example: '2024-01-15T11:45:00Z'
      description: Backoffice user information response
    LanguageResponseDTO:
      type: object
      properties:
        id:
          type: integer
          description: Unique language identifier
          format: int32
          example: 1
        code:
          type: string
          description: ISO language code
          example: en
        name:
          type: string
          description: Language name in English
          example: English
        nativeName:
          type: string
          description: Language name in native script
          example: English
        country:
          type: string
          description: Country where language is primarily spoken
          example: United States
        isActive:
          type: boolean
          description: Whether the language is currently active
          example: true
        isDefault:
          type: boolean
          description: Whether this is the default system language
          example: true
        createdAt:
          type: string
          description: When the language was created
          format: date-time
        updatedAt:
          type: string
          description: When the language was last updated
          format: date-time
      description: Language information response
    UpdateClientRequestDTO:
      required:
        - businessLineId
        - legalName
        - logoUrl
        - name
        - rfc
        - subdomain
        - subscriptionEndDate
        - subscriptionStartDate
      type: object
      properties:
        name:
          maxLength: 200
          minLength: 2
          type: string
          description: Client name
          example: ACME Corporation
        subdomain:
          maxLength: 500
          minLength: 0
          pattern: ^[a-z0-9-]+$
          type: string
          description: Subdomain
          example: acme
        legalName:
          maxLength: 300
          minLength: 0
          type: string
          description: Legal name of the client
          example: ACME Corporation S.A. de C.V.
        rfc:
          maxLength: 13
          minLength: 12
          pattern: ^[A-Z&Ñ]{3,4}[0-9]{6}[A-Z0-9]{3}$
          type: string
          description: RFC (Tax ID)
          example: ACM123456789
        businessLineId:
          type: integer
          description: Business line ID
          format: int32
          example: 1
        responsibleUserId:
          type: integer
          description: Responsible user ID
          format: int64
          example: 1
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: Client description (max 1000 characters)
          example: Leading technology company specializing in innovative solutions
        legalContactName:
          maxLength: 200
          minLength: 0
          type: string
          description: Legal contact name
          example: John Doe
        legalContactEmail:
          maxLength: 150
          minLength: 0
          type: string
          description: Legal contact email
          example: legal@acme.com
        legalContactPhone:
          maxLength: 20
          minLength: 0
          type: string
          description: Legal contact phone
          example: '+525551234567'
        technicalContactName:
          maxLength: 200
          minLength: 0
          type: string
          description: Technical contact name
          example: Jane Smith
        technicalContactEmail:
          maxLength: 150
          minLength: 0
          type: string
          description: Technical contact email
          example: tech@acme.com
        technicalContactPhone:
          maxLength: 20
          minLength: 0
          type: string
          description: Technical contact phone
          example: '+525557654321'
        logoUrl:
          maxLength: 500
          minLength: 0
          type: string
          description: Logo URL
          example: https://acme.com/logo.png
        subscriptionStartDate:
          type: string
          description: Subscription start date
          format: date
          example: '2025-01-01'
        subscriptionEndDate:
          type: string
          description: Subscription end date
          format: date
          example: '2025-12-31'
        isActive:
          type: boolean
          description: Whether the client is active
          example: true
          default: true
      description: Request to update an existing client
    ClientResponseDTO:
      type: object
      properties:
        id:
          type: integer
          description: Client ID
          format: int32
          example: 1
        name:
          type: string
          description: Client name
          example: Acme Corporation
        domainUrl:
          type: string
          description: Client domain URL
          example: https://acme.com
        logoUrl:
          type: string
          description: Client logo URL
          example: https://acme.com/logo.png
        schemaName:
          type: string
          description: Database schema name
          example: acme_client
        subscriptionStartDate:
          type: string
          description: Subscription start date
          format: date
          example: '2025-09-02'
        subscriptionEndDate:
          type: string
          description: Subscription end date
          format: date
          example: '2025-10-02'
        createdById:
          type: integer
          description: User ID who created this client
          format: int64
          example: 1
        isActive:
          type: boolean
          description: Whether company is active
          example: true
        createdAt:
          type: string
          description: When the company was created
          format: date-time
        updatedAt:
          type: string
          description: When the company was last updated
          format: date-time
      description: Client information response
    CreateBackofficeBusinessLineRequestDTO:
      required:
        - code
        - name
      type: object
      properties:
        code:
          maxLength: 20
          minLength: 3
          type: string
          description: Business line code
          example: TECH001
        name:
          maxLength: 150
          minLength: 2
          type: string
          description: Business line name
          example: Software Development
        description:
          maxLength: 500
          minLength: 0
          type: string
          description: Business line description
          example: Companies focused on software creation and development
        isActive:
          type: boolean
          description: Is the business line active
          example: true
          default: true
      description: Request to create a new business line for backoffice management
    BackofficeBusinessLineDTO:
      type: object
      properties:
        id:
          type: integer
          description: Business line ID
          format: int32
          example: 1
        code:
          type: string
          description: Business line code
          example: TECH001
        name:
          type: string
          description: Business line name
          example: Software Development
        description:
          type: string
          description: Business line description
          example: Companies focused on software creation and development
        isActive:
          type: boolean
          description: Is the business line active
          example: true
        createdAt:
          type: string
          description: Creation date
          format: date-time
        updatedAt:
          type: string
          description: Last update date
          format: date-time
      description: Business Line information for backoffice catalog management
    MessageResponseDTO:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: Operation completed successfully
      description: Standard message response
    RegisterRequestDTO:
      required:
        - email
        - firstName
        - lastName
        - username
      type: object
      properties:
        username:
          maxLength: 100
          minLength: 3
          type: string
          description: Unique username for the user
          example: john.doe
        email:
          maxLength: 200
          minLength: 0
          type: string
          description: Email address of the user
          format: email
          example: john.doe@example.com
        firstName:
          maxLength: 200
          minLength: 0
          type: string
          description: User's first name (includes first and middle names)
          example: John Michael
        lastName:
          maxLength: 100
          minLength: 0
          type: string
          description: User's last name (paternal surname)
          example: Doe
        secondLastName:
          maxLength: 100
          minLength: 0
          type: string
          description: User's second last name (maternal surname)
          example: Smith
        phoneNumber:
          maxLength: 15
          minLength: 0
          pattern: ^\+?[1-9]\d{1,14}$
          type: string
          description: Phone number with country code
          example: '+525551234567'
        phoneExtension:
          maxLength: 10
          minLength: 0
          type: string
          description: Phone extension number
          example: '123'
        roleCodes:
          type: array
          description: List of role codes to assign to the user. If empty, defaults to USER role.
          example:
            - USER
            - MANAGER
          items:
            type: string
            description: List of role codes to assign to the user. If empty, defaults to USER role.
            example: '["USER","MANAGER"]'
        effectiveRoleCodes:
          type: array
          items:
            type: string
      description: Request to register a new user in the system
    AuthResponseDTO:
      type: object
      properties:
        token:
          type: string
          description: JWT access token for authenticated requests
          example: eyJhbGciOiJIUzI1NiJ9...
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
          example: eyJhbGciOiJIUzI1NiJ9...
        tokenType:
          type: string
          description: Token type, always 'Bearer'
          example: Bearer
        expiresIn:
          type: integer
          description: Token expiration time in milliseconds
          format: int64
          example: 86400000
        username:
          type: string
          description: Username of the authenticated user
          example: john.doe
        email:
          type: string
          description: Email address of the authenticated user
          example: john.doe@example.com
        roles:
          type: array
          description: List of user roles/permissions
          example:
            - USER
            - ADMIN
          items:
            type: string
            description: List of user roles/permissions
            example: '["USER","ADMIN"]'
      description: Response containing authentication tokens and user information
    TokenCleanupResultDTO:
      type: object
      properties:
        deletedUsed:
          type: integer
          description: Number of used tokens deleted
          format: int32
          example: 5
        deletedExpired:
          type: integer
          description: Number of expired unused tokens deleted
          format: int32
          example: 3
        totalDeleted:
          type: integer
          description: Total number of tokens deleted
          format: int32
          example: 8
      description: Password setup token cleanup operation result
    SetupPasswordRequestDTO:
      required:
        - confirmPassword
        - password
        - token
      type: object
      properties:
        token:
          type: string
          description: Password setup token from email
          example: abc123...
        password:
          maxLength: 128
          minLength: 8
          type: string
          description: New password
          example: securePassword123
        confirmPassword:
          type: string
          description: Password confirmation
          example: securePassword123
        idClient:
          type: integer
          description: Debug client ID override (optional)
          format: int32
          example: 1
      description: Request to setup password using onboarding token
    SwitchSchemaRequestDTO:
      required:
        - idClient
      type: object
      properties:
        idClient:
          type: integer
          description: ID of the client to switch to
          format: int32
          example: 1
      description: Request to switch to a specific client schema
    RefreshTokenRequestDTO:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token
          example: eyJhbGciOi...
        idClient:
          type: integer
          description: Debug client ID override (optional)
          format: int32
          example: 1
      description: Request to refresh JWT token
    LoginRequestDTO:
      required:
        - password
        - username
      type: object
      properties:
        username:
          maxLength: 200
          minLength: 0
          type: string
          description: Username for authentication. Use exact username, NOT email
          example: orca
        password:
          type: string
          description: User password
          example: advisor
        idClient:
          type: integer
          description: Client ID for debug mode only. This field is ignored unless schema debug mode is enabled.
          format: int32
          example: 1
      description: Login credentials (schema field is ignored for backoffice)
    CreateClientRequestDTO:
      required:
        - businessLineId
        - legalName
        - logoUrl
        - name
        - rfc
        - schemaName
        - subdomain
        - subscriptionEndDate
        - subscriptionStartDate
      type: object
      properties:
        name:
          maxLength: 200
          minLength: 2
          type: string
          description: Client name
          example: ACME Corporation
        subdomain:
          maxLength: 500
          minLength: 0
          pattern: ^[a-z0-9-]+$
          type: string
          description: Subdomain
          example: acme
        legalName:
          maxLength: 300
          minLength: 0
          type: string
          description: Legal name of the client
          example: ACME Corporation S.A. de C.V.
        rfc:
          maxLength: 13
          minLength: 12
          pattern: ^[A-Z&Ñ]{3,4}[0-9]{6}[A-Z0-9]{3}$
          type: string
          description: RFC (Tax ID)
          example: ACM123456789
        businessLineId:
          type: integer
          description: Business line ID
          format: int32
          example: 1
        responsibleUserId:
          type: integer
          description: Responsible user ID
          format: int64
          example: 1
        description:
          maxLength: 1000
          minLength: 0
          type: string
          description: Client description (max 1000 characters)
          example: Leading technology company specializing in innovative solutions
        logoUrl:
          maxLength: 500
          minLength: 0
          type: string
          description: Logo URL
          example: https://acme.com/logo.png
        schemaName:
          maxLength: 49
          minLength: 1
          pattern: ^[a-z0-9_]+$
          type: string
          description: Schema name suffix (without orca_sns_user_ prefix)
          example: acme_corp
        subscriptionStartDate:
          type: string
          description: Subscription start date
          format: date
          example: '2025-01-01'
        subscriptionEndDate:
          type: string
          description: Subscription end date
          format: date
          example: '2025-12-31'
        isActive:
          type: boolean
          description: Whether the client is active
          example: true
          default: true
        legalContactName:
          maxLength: 200
          minLength: 0
          type: string
          description: Legal contact name
          example: John Doe
        legalContactEmail:
          maxLength: 150
          minLength: 0
          type: string
          description: Legal contact email
          example: legal@acme.com
        legalContactPhone:
          maxLength: 20
          minLength: 0
          type: string
          description: Legal contact phone
          example: '+525551234567'
        technicalContactName:
          maxLength: 200
          minLength: 0
          type: string
          description: Technical contact name
          example: Jane Smith
        technicalContactEmail:
          maxLength: 150
          minLength: 0
          type: string
          description: Technical contact email
          example: tech@acme.com
        technicalContactPhone:
          maxLength: 20
          minLength: 0
          type: string
          description: Technical contact phone
          example: '+525557654321'
      description: Request to create a new client
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
    PagedModel:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
        page:
          $ref: '#/components/schemas/PageMetadata'
    BackofficeRoleBasicDTO:
      type: object
      properties:
        id:
          type: integer
          description: Role ID
          format: int32
          example: 1
        code:
          type: string
          description: Role code
          example: BO_ADMIN
        name:
          type: string
          description: Role name
          example: BackOffice Administrator
        description:
          type: string
          description: Role description
          example: Full access to backoffice system
        isActive:
          type: boolean
          description: Whether role is active
          example: true
      description: Basic backoffice role information
    TokenStatisticsDTO:
      type: object
      properties:
        totalTokens:
          type: integer
          description: Total number of tokens
          format: int64
          example: 25
        activeTokens:
          type: integer
          description: Number of active (unused and not expired) tokens
          format: int64
          example: 10
        expiredTokens:
          type: integer
          description: Number of expired unused tokens
          format: int64
          example: 5
        usedTokens:
          type: integer
          description: Number of used tokens
          format: int64
          example: 10
        tokensExpiringSoon:
          type: integer
          description: Number of tokens expiring within 7 days
          format: int64
          example: 2
      description: Password setup token statistics
    TokenCleanupConfigDTO:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether automatic token cleanup is enabled
          example: true
        scheduleCron:
          type: string
          description: Cron expression for cleanup schedule
          example: 0 0 2 * * *
        daysKeepUsed:
          type: integer
          description: Number of days to keep used tokens before deletion
          format: int32
          example: 30
        daysKeepExpired:
          type: integer
          description: Number of days to keep expired unused tokens before deletion
          format: int32
          example: 7
      description: Password setup token cleanup configuration
    ClientAccessDTO:
      type: object
      properties:
        clientId:
          type: integer
          description: Client ID
          format: int32
          example: 1
        clientName:
          type: string
          description: Client name
          example: Demo Organization
        schemaName:
          type: string
          description: Database schema name
          example: orca_sns_user_demo
        subdomain:
          type: string
          description: Client subdomain
          example: demo
        logoUrl:
          type: string
          description: Client logo URL
          example: https://demo.com/logo.png
      description: Client access information for backoffice user
    SchemaAvailabilityResponseDTO:
      type: object
      properties:
        schemaName:
          type: string
          description: The schema name that was checked
          example: acme_corp
        available:
          type: boolean
          description: Whether the schema name is available for use
          example: true
        fullSchemaName:
          type: string
          description: Full schema name with prefix
          example: orca_sns_user_acme_corp
        message:
          type: string
          description: Additional details about availability
          example: Schema name is available
      description: Response indicating schema name availability
    ClientCacheDTO:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the client
          format: int32
          example: 1
        name:
          type: string
          description: Client name
          example: Acme Corporation
        logoUrl:
          type: string
          description: URL of the client's logo
          example: https://example.com/logo.png
        schemaName:
          type: string
          description: Database schema name for the client
          example: local_dev
      description: Client data stored in cache for performance optimization
    RoleLicenseDTO:
      type: object
      properties:
        clientId:
          type: integer
          description: Client ID that owns this role
          format: int32
          example: 1
        roleId:
          type: integer
          description: Unique identifier of the role
          format: int32
          example: 1
        code:
          type: string
          description: Role code
          example: ADMIN
        name:
          type: string
          description: Role name
          example: Administrator
        description:
          type: string
          description: Role description
          example: System administrator with full access
        maxLicenses:
          type: integer
          description: Maximum number of licenses for this role
          format: int32
          example: 10
        usedLicenses:
          type: integer
          description: Number of used licenses for this role
          format: int32
          example: 7
        availableLicenses:
          type: integer
          description: Number of available licenses for this role
          format: int32
          example: 3
      description: Role data with license usage information stored in cache
  securitySchemes:
    BearerAuthentication:
      type: http
      description: 'JWT token for authentication. Format: ''Bearer {token}'''
      name: Bearer Authentication
      scheme: bearer
      bearerFormat: JWT
